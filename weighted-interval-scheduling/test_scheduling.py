import unittest
import scheduling
from random import randint

expectation = [
    ({(0, 1, 1)}, 1),
    ({(8, 9, 9)}, 9),
    ({(10, 12, 3)}, 3),
    ({(14, 15, 8)}, 8),
    ({(20, 25, 3)}, 3),
    ({(0, 2, 1), (1, 2, 1)}, 1),
    ({(0, 2, 1), (1, 5, 1)}, 1),
    ({(8, 9, 2), (6, 7, 1)}, 3),
    ({(5, 9, 2), (7, 10, 2)}, 2),
    ({(10, 11, 1), (9, 10, 3)}, 4),
    ({(11, 14, 9), (12, 14, 4)}, 9),
    ({(12, 24, 1), (23, 24, 4)}, 4),
    ({(14, 17, 3), (16, 17, 4)}, 4),
    ({(16, 17, 1), (16, 18, 2)}, 2),
    ({(22, 25, 2), (20, 22, 1)}, 3),
    ({(36, 41, 2), (27, 38, 1)}, 2),
    ({(18, 22, 12), (7, 19, 2)}, 12),
    ({(0, 4, 2), (2, 4, 1), (3, 4, 1)}, 2),
    ({(1, 5, 1), (0, 2, 1), (3, 6, 1)}, 2),
    ({(2, 3, 2), (1, 2, 4), (1, 3, 4)}, 6),
    ({(5, 6, 4), (6, 7, 7), (6, 9, 4)}, 11),
    ({(1, 2, 6), (2, 4, 16), (3, 4, 16)}, 22),
    ({(5, 7, 22), (5, 6, 8), (5, 7, 16)}, 22),
    ({(15, 18, 2), (7, 10, 1), (5, 11, 2)}, 4),
    ({(2, 4, 23), (2, 4, 13), (0, 2, 27)}, 50),
    ({(4, 14, 2), (12, 15, 2), (1, 15, 1)}, 2),
    ({(11, 12, 3), (8, 10, 4), (11, 12, 1)}, 7),
    ({(12, 13, 1), (12, 13, 2), (9, 10, 2)}, 4),
    ({(1, 3, 2), (1, 7, 11), (14, 15, 12)}, 23),
    ({(5, 17, 3), (15, 30, 1), (23, 24, 3)}, 6),
    ({(9, 10, 2), (11, 12, 1), (11, 12, 2)}, 4),
    ({(12, 14, 2), (11, 13, 1), (13, 14, 4)}, 5),
    ({(13, 14, 1), (13, 14, 2), (12, 13, 3)}, 5),
    ({(17, 22, 4), (10, 16, 1), (19, 20, 4)}, 5),
    ({(9, 10, 26), (7, 9, 25), (7, 10, 24)}, 51),
    ({(15, 28, 10), (24, 31, 9), (30, 32, 14)}, 24),
    ({(1, 2, 1), (2, 3, 1), (1, 3, 2), (1, 2, 4)}, 5),
    ({(5, 6, 2), (3, 5, 2), (5, 6, 4), (4, 5, 4)}, 8),
    ({(5, 100, 1), (2, 7, 1), (8, 12, 1), (15, 80, 1)}, 3),
    ({(8, 19, 1), (8, 11, 2), (20, 21, 2), (8, 15, 2)}, 4),
    ({(5, 6, 30), (3, 8, 12), (9, 10, 24), (8, 10, 2)}, 54),
    ({(20, 21, 1), (13, 23, 2), (19, 21, 1), (8, 21, 1)}, 2),
    ({(8, 21, 7), (21, 22, 2), (6, 11, 7), (13, 19, 8)}, 17),
    ({(11, 12, 5), (11, 12, 6), (11, 12, 1), (10, 12, 1)}, 6),
    ({(16, 18, 4), (14, 17, 8), (12, 17, 1), (17, 18, 1)}, 9),
    ({(18, 22, 8), (8, 18, 4), (16, 18, 6), (18, 22, 7)}, 14),
    ({(21, 23, 1), (24, 25, 2), (24, 25, 3), (24, 25, 4)}, 5),
    ({(11, 25, 21), (3, 28, 17), (4, 32, 30), (6, 10, 19)}, 40),
    ({(39, 40, 6), (27, 39, 4), (31, 34, 6), (24, 31, 10)}, 22),
    ({(24, 25, 7), (23, 25, 12), (19, 22, 4), (17, 19, 15)}, 31),
    ({(36, 39, 13), (13, 17, 2), (23, 24, 14), (19, 24, 4)}, 29),
    ({(0, 3, 7), (1, 4, 13), (3, 4, 14), (1, 4, 15), (0, 3, 2)}, 21),
    ({(1, 2, 12), (2, 4, 26), (0, 1, 15), (2, 3, 4), (0, 3, 9)}, 53),
    ({(3, 4, 12), (2, 4, 10), (2, 3, 8), (2, 4, 9), (2, 4, 16)}, 20),
    ({(7, 9, 10), (6, 9, 11), (2, 9, 13), (3, 7, 2), (2, 5, 9)}, 20),
    ({(10, 16, 1), (7, 11, 4), (9, 11, 4), (6, 15, 2), (2, 3, 4)}, 8),
    ({(3, 16, 7), (7, 16, 4), (2, 5, 1), (12, 13, 6), (6, 9, 4)}, 11),
    ({(7, 11, 14), (11, 12, 15), (7, 11, 3), (7, 9, 5), (5, 11, 3)}, 29),
    ({(9, 13, 1), (11, 12, 5), (12, 13, 3), (12, 13, 2), (9, 13, 8)}, 8),
    ({(39, 42, 3), (25, 29, 2), (15, 16, 3), (37, 41, 4), (15, 35, 3)}, 9),
    ({(22, 23, 3), (16, 18, 3), (19, 20, 2), (15, 16, 3), (21, 22, 4)}, 15),
    ({(17, 25, 14), (26, 36, 9), (31, 36, 1), (38, 39, 8), (13, 21, 7)}, 31),
    ({(26, 32, 9), (30, 33, 10), (23, 29, 7), (24, 30, 3), (13, 24, 1)}, 17),
    ({(13, 14, 14), (12, 14, 2), (10, 14, 3), (13, 14, 3), (10, 11, 10)}, 24),
    ({(14, 21, 11), (12, 23, 13), (19, 23, 18), (21, 25, 7), (25, 26, 8)}, 26),
]

class TestScheduling(unittest.TestCase):
    def test_colliding(self):
        def random_interval():
            start = randint(0, 100)
            end = start + randint(1, 25)
            value = randint(1, 25)
            return (start, end, value)
        intervals = [random_interval() for i in range(2**randint(4, 8))]
        output = scheduling.get_schedule(intervals)
        for i in output:
            for j in output:
                if i != j:
                    if i[0] < j[1] < i[1] or i[0] < j[0] < i[1]:
                        self.fail(f"{intervals} -> {output}")


    def test_size(self):
        for arg, expected_v in expectation:
            actual_output = scheduling.get_schedule(arg)
            v = sum(x[2] for x in actual_output)
            self.assertEqual(v, expected_v, f"In: {arg}")


if __name__ == "__main__":
    unittest.main()
